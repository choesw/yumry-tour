{"version":3,"sources":["components/Navigator.jsx","components/Gallery.jsx","pages/Home.jsx","pages/About.jsx","shared/App.js","client/Root.js","serviceWorker.js","index.js"],"names":["Navigator","className","map","x","key","Gallery","Component","Home","About","App","to","src","exact","path","component","Root","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTAgBeA,G,MAbG,WAEhB,OACE,yBAAKC,UAAU,OACb,4BAHa,CAAC,QAAS,2BAAQ,2BAAQ,eAAM,sBAIjCC,KAAI,SAACC,GAAD,OACZ,wBAAIC,IAAKD,GAAT,IAAcA,EAAd,YCDKE,E,uKAJX,OAAO,oD,GAFWC,aC2CPC,E,uKAxCX,OACE,yBAAKN,UAAU,WACb,wCACA,yBAAKA,UAAU,WACb,kBAAC,EAAD,OAIF,ysD,GAVWK,aCSJE,E,uKARX,OACE,6BACE,0C,GAJYF,aC0BLG,G,6KApBP,OACI,oCACI,yBAAKR,UAAU,UACX,kBAAC,IAAD,CAAMS,GAAG,KACL,yBAAKT,UAAU,OAAOU,IAAI,4BAE9B,yBAAKV,UAAU,OAAM,kBAAC,EAAD,QAEzB,yBAAKA,UAAU,QACX,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,SAASC,UAAWN,KAE1C,kBAAC,IAAD,CAAME,GAAG,KACL,yBAAKT,UAAU,UAAUU,IAAI,+B,GAf/BL,cCIHS,EANF,kBACT,kBAAC,IAAD,CAAeC,SAAUC,eACrB,kBAAC,EAAD,QCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2834e540.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/Navigator.css\";\n\nconst Navigator = () => {\n  const MenuList = [\"about\", \"커뮤니티\", \"투어상품\", \"예약\", \"게시판\"];\n  return (\n    <div className=\"nav\">\n      <ul>\n        {MenuList.map((x) => (\n          <li key={x}> {x} </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Navigator;\n","import React, { Component } from \"react\";\n\nclass Gallery extends Component {\n  render() {\n    return <div>This is Gallery</div>;\n  }\n}\n\nexport default Gallery;\n","import React, { Component } from \"react\";\nimport { Gallery } from \"components\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h2> 홈 </h2>\n        <div className=\"gallery\">\n          <Gallery />\n        </div>\n\n        {/* dummy text */}\n        <div>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean felis\n          dolor, gravida quis arcu placerat, scelerisque convallis nisl. Proin\n          non eros id ipsum dictum mattis. Morbi varius volutpat lorem, ut\n          fermentum ante. Morbi gravida in arcu eget efficitur. Suspendisse\n          euismod dolor ut tortor consectetur venenatis. Pellentesque ut orci et\n          sapien semper porttitor vitae at dui. Ut sagittis vitae risus id\n          rhoncus. Etiam sit amet pellentesque dolor. Nam nec vulputate leo.\n          Fusce eu augue sed ante dignissim semper. Nam in tortor sed turpis\n          pharetra tristique eget a lacus. Proin nunc mauris, lacinia et laoreet\n          eu, auctor nec felis. Ut ex quam, lobortis eget libero vel, mattis\n          molestie orci. Vestibulum faucibus mollis justo. Donec facilisis ac\n          velit vitae consequat. Suspendisse imperdiet nulla in metus dignissim\n          molestie. Aenean commodo mauris felis, eu placerat lorem tincidunt a.\n          Aenean condimentum tincidunt vulputate. Ut pretium dui neque.\n          Vestibulum dictum maximus felis, eu sagittis eros egestas a. Aenean\n          dictum, magna ut lobortis sollicitudin, ligula mauris tincidunt nulla,\n          id semper nulla lorem nec justo. Curabitur in neque consequat nunc\n          auctor elementum sed eget justo. Nullam nec tempus mauris. Integer\n          tempor ornare ligula sed commodo. Nullam a molestie dui. Fusce mollis\n          ullamcorper magna. Cras quis porttitor est. Quisque bibendum, elit\n          sodales rhoncus ultricies, est nisl lobortis lectus, id imperdiet\n          tortor metus eu mauris. Curabitur non lectus eget nunc gravida viverra\n          a vel eros. Morbi ornare, ligula fermentum rutrum auctor, purus diam\n          congue metus, quis aliquam lectus diam ut leo. Donec porttitor, ex ac\n          lobortis rutrum, nulla risus luctus justo, ut cursus dolor nisi a\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nclass About extends Component {\n  render() {\n    return (\n      <div>\n        <h2>About</h2>\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\nimport { Route, Link } from 'react-router-dom';\nimport Navigator from 'components/Navigator';\nimport { Home, About } from 'pages';\nimport 'css/App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <>\n                <div className=\"header\">\n                    <Link to='/'>\n                        <img className=\"logo\" src=\"./assets/logo-main.png\" />\n                    </Link>\n                    <div className=\"nav\"><Navigator /></div>\n                </div>\n                <div className=\"page\">\n                    <Route exact path=\"/\" component={Home} />\n                    <Route exact path=\"/about\" component={About} />\n                </div>\n                <Link to=\"#\">\n                    <img className=\"sticker\" src=\"./assets/sticker.png\" />\n                </Link>\n            </>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from 'shared/App';\n\nconst Root = () => (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './client/Root';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}